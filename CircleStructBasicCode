struct Circle
    {
        //Fields
        double radius;
        double diameter;
        Vector2 center;

        //Properties
        public double X { get { return center.X; } set { this.center = new Vector2((float)value, this.center.Y); } }
        public double Y { get { return center.Y; } set { this.center = new Vector2(this.center.X, (float)value); } }
        public double Radius { get { return radius; } set { this.radius = value; } }
        public double Diameter { get { return diameter; } }
        public Vector2 Center { get { return center; } }


        //Constructor
        public Circle(int pX, int pY, double pRadius)
        {
            center = new Vector2(pX, pY);
            radius = pRadius;
            diameter = radius * 2;            
        }

        #region Methods
        /// <summary>
        /// Checks for circle-to-circle intersection
        /// </summary>
        /// <param name="circle">circle to check against</param>
        /// <returns>bool if intersectin or not</returns>
        public bool Intersects(Circle otherCircle)
        {
            //Vector2 to check the distance
            Vector2 otherCenter = new Vector2((float)otherCircle.X, (float)otherCircle.Y);

            if (this.DistanceTo(otherCircle.Center) <= (this.radius + otherCircle.Radius))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <summary>
        /// Checks for the intersection of rectangle to Circle
        /// </summary>
        /// <param name="rect">rectangle to check against</param>
        /// <returns>bool if intersecting or not</returns>
        public bool Intersects(Rectangle rect)
        {
           
            if (this.DistanceTo(new Vector2(rect.Center.X, rect.Top)) <= this.Radius ||
               this.DistanceTo(new Vector2(rect.Center.X, rect.Bottom)) <= this.Radius ||
               this.DistanceTo(new Vector2(rect.Right, rect.Center.Y)) <= this.Radius ||
               this.DistanceTo(new Vector2(rect.Left, rect.Center.Y)) <= this.Radius)
            {
                Console.WriteLine("It intersects");
                return true;
            }

            else if (this.DistanceTo(new Vector2(rect.X, rect.Y)) <= this.Radius || this.DistanceTo(new Vector2(rect.X + rect.Width, rect.Y)) <= this.Radius
                || this.DistanceTo(new Vector2(rect.X + rect.Width, rect.Y + rect.Height)) <= this.Radius || this.DistanceTo(new Vector2(rect.X, rect.Y + rect.Height)) <= this.Radius)
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        /// <summary>
        /// Helper Method. 
        /// Calculates distance between this.center and another point
        /// </summary>
        /// <param name="point"></param>
        /// <returns>double distance between this circle's center and another point</returns>
        public double DistanceTo(Vector2 vector)
        {
            return Vector2.Distance(this.Center, vector);

        }

        #endregion
    }
